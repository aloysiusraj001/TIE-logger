import React from 'react';
import { X, ExternalLink } from 'lucide-react';

interface SupabaseIntegrationGuideProps {
  onClose: () => void;
}

const CodeBlock: React.FC<{ children: React.ReactNode, lang?: string }> = ({ children, lang = 'bash' }) => (
    <pre className={`bg-slate-100 dark:bg-slate-900/70 p-4 rounded-lg overflow-x-auto text-sm text-slate-800 dark:text-slate-200 my-2 ring-1 ring-slate-200 dark:ring-slate-700 language-${lang}`}>
        <code>{children}</code>
    </pre>
);

const Step: React.FC<{ title: string, children: React.ReactNode }> = ({ title, children }) => {
    return (
        <div className="py-2">
            <h3 className="text-lg font-semibold text-slate-700 dark:text-slate-100 mb-2">{title}</h3>
            <div className="space-y-2 prose prose-sm dark:prose-invert max-w-none prose-a:text-brand-500 hover:prose-a:text-brand-600 prose-code:bg-slate-200 prose-code:dark:bg-slate-700 prose-code:rounded prose-code:px-1 prose-code:font-mono">
                {children}
            </div>
        </div>
    )
}

const SupabaseIntegrationGuide: React.FC<SupabaseIntegrationGuideProps> = ({ onClose }) => {
  return (
    <div className="fixed inset-0 bg-black/60 z-40 flex items-center justify-center p-4" onClick={onClose}>
      <div 
        className="bg-white dark:bg-slate-800 w-full max-w-3xl h-[90vh] rounded-2xl shadow-2xl flex flex-col relative overflow-hidden"
        onClick={e => e.stopPropagation()}
      >
        <div className="flex-shrink-0 p-4 border-b border-slate-200 dark:border-slate-700 flex items-center justify-between">
          <h2 className="text-xl font-bold text-slate-800 dark:text-slate-100">Supabase Integration Guide</h2>
          <button onClick={onClose} className="p-1 rounded-full hover:bg-slate-100 dark:hover:bg-slate-700">
            <X className="h-6 w-6 text-slate-500" />
          </button>
        </div>
        <div className="flex-grow overflow-y-auto p-6 space-y-6 text-slate-600 dark:text-slate-300">
            <p>This guide will walk you through setting up a Supabase backend to power this application. You'll need a GitHub account to sign up for Supabase.</p>

            <Step title="1. Create a Supabase Project">
                <p>Go to the <a href="https://app.supabase.com/" target="_blank" rel="noopener noreferrer">Supabase Dashboard</a>, create an organization, and then click "New Project". Give your project a name and create a secure database password (save this password!).</p>
            </Step>

            <Step title="2. Get Your Project API Keys">
                <p>In your new project's dashboard, navigate to the "Project Settings" (the gear icon in the left sidebar), then select the "API" section. You will find your Project URL and your `anon` public key. You will need these for the next step.</p>
            </Step>

            <Step title="3. Update Your Application Code">
                <p>Open the file `services/supabase.ts` in your code editor. Copy your Project URL and `anon` key from the Supabase dashboard and paste them into the corresponding placeholders.</p>
                <CodeBlock lang="typescript">
{`// services/supabase.ts
import { createClient } from "@supabase/supabase-js";

const supabaseUrl = "YOUR_PROJECT_URL"; // Paste your URL here
const supabaseAnonKey = "YOUR_ANON_KEY"; // Paste your anon key here

export const supabase = createClient(supabaseUrl, supabaseAnonKey);`}
                </CodeBlock>
            </Step>

            <Step title="4. Create the 'logs' Table">
                <p>Go to the "SQL Editor" in your Supabase dashboard. Click "New query" and paste the following SQL code to create your `logs` table. This table will store all the student entries.</p>
                <CodeBlock lang="sql">
{`-- Create the logs table
CREATE TABLE public.logs (
  id bigint generated by default as identity primary key,
  "userId" uuid references auth.users(id) not null,
  "userEmail" text,
  plan text,
  achievement text,
  created_at timestamp with time zone default now() not null
);

-- Comments for clarity
COMMENT ON COLUMN public.logs."userId" IS 'Foreign key to the authenticated user';`}
                </CodeBlock>
                 <p>Click "Run" to execute the query and create the table.</p>
            </Step>
            
            <Step title="5. Set Up Row Level Security (RLS)">
                <p>This is the most important step for security. RLS ensures that users can only access their own data. Go back to the SQL Editor and run the following queries one by one.</p>
                
                <p><strong>First, enable RLS on your new table:</strong></p>
                <CodeBlock lang="sql">
{`ALTER TABLE public.logs ENABLE ROW LEVEL SECURITY;`}
                </CodeBlock>

                <p><strong>Next, create a policy that allows users to create logs for themselves:</strong></p>
                 <CodeBlock lang="sql">
{`CREATE POLICY "Users can insert their own logs"
ON public.logs FOR INSERT
TO authenticated
WITH CHECK (auth.uid() = "userId");`}
                 </CodeBlock>

                 <p><strong>Finally, create a policy that allows users to view their own logs, and allows admins (based on the hardcoded list in `App.tsx`) to view all logs:</strong></p>
                 <CodeBlock lang="sql">
{`CREATE POLICY "Users can view their own logs, and admins can view all"
ON public.logs FOR SELECT
TO authenticated
USING (
  (auth.uid() = "userId") OR
  (auth.email() IN (
    'winnie@tie.ust',
    'jac@tie.ust',
    'sean@tie.ust',
    'aloysius@tie.ust',
    'admin@tie.ust'
  ))
);`}
                 </CodeBlock>
                 <p>Your database is now secure. Only logged-in users can interact with it according to these rules.</p>
            </Step>

            <Step title="6. Enable Realtime (Optional but Recommended)">
              <p>To make the log history update instantly without needing a page refresh, you should enable Supabase Realtime.</p>
              <p>Go to "Database" in the left sidebar, then click on "Replication". Find the `logs` table and click the "0 tables" button under the `public` schema. Toggle the switch for the `logs` table to enable it.</p>
            </Step>

            <Step title="7. Disable Email Confirmations (for easier testing)">
                <p>By default, Supabase requires users to confirm their email address before they can log in. For easier testing, you can disable this.</p>
                <p>Go to "Authentication" -> "Providers" in the dashboard. Find the Email provider and click the three dots to edit it. Turn off the "Confirm email" toggle.</p>
            </Step>

            <div className="text-center p-4 border-t border-slate-200 dark:border-slate-700">
                <a href="https://supabase.com/docs" target="_blank" rel="noopener noreferrer" className="text-brand-500 hover:underline inline-flex items-center">
                    Read the official Supabase Docs for more info <ExternalLink className="h-4 w-4 ml-1.5" />
                </a>
            </div>
        </div>
      </div>
    </div>
  );
};

export default SupabaseIntegrationGuide;